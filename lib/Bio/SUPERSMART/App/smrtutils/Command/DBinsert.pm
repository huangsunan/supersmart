package Bio::SUPERSMART::App::smrtutils::Command::DBinsert;

use strict;
use warnings;

use Bio::Phylo::IO qw(parse unparse);
use Bio::Phylo::Util::CONSTANT ':objecttypes';

use Bio::Phylo::PhyLoTA::Service::MarkersAndTaxaSelector;
use Bio::Phylo::PhyLoTA::Domain::MarkersAndTaxa;

use base 'Bio::SUPERSMART::App::SubCommand';
use Bio::SUPERSMART::App::smrtutils qw(-command);

# ABSTRACT: 

=head1 NAME

DBinsert - insert custom sequences and taxa into database

=head1 SYNOPSYS


=head1 DESCRIPTION

=cut

sub options {    
	my ($self, $opt, $args) = @_;
	my $format_default = 'fasta';
	my $prefix_default = 'SMRT';
	return (
		['alignment|a=s', "alignment file(s) to insert into database, multiple files should be separatet by commata", { arg => 'file' }],		
		['list|l=s', "list of alignment files to insert into database", { arg => 'file' } ],		
		["taxafile|t=s", "taxa file as produced by 'smrt-utils replicate'; if given, possible artificial taxa are inserted", {}],
		['prefix|p=s', "prefix for generated sequence accessions, defaults to $prefix_default", {default => $prefix_default}],
		['desc|d=s', "description for sequence(s)", {}],
		['format|f=s', "format of input alignemnt files, default: $format_default", { default => $format_default }],
		['generate_fasta|g', "generate FASTA files compatible with smrt commands. FASTA file names will have the suffix '-smrt-inserted'. An alignment list containing he new fasta files is created under the name 'aligned-smrt-inserted.txt'. This option is enabled by default.", {default => 1} ]
	    );	
}

sub validate {
	my ($self, $opt, $args) = @_;			
	$self->usage_error('need either alignment, list or taxafile argument') if not ($opt->alignment or $opt->list or $opt->taxafile);
}

sub run {
	my ($self, $opt, $args) = @_;    
	
	my $logger = $self->logger;      	
		
	# insert potential artificial taxa, if given in taxa file
	if ( $opt->taxafile ) {
		$self->_insert_taxa($opt->taxafile);		
	}

	my $aln_str = $opt->alignment;
	my $aln_list = $opt->list;

	# insert alignments, if given in argument
	if ( $aln_str || $aln_list ) {
		my @files;
		
		push @files, split(',', $aln_str) if $aln_str;
		
		if ( $aln_list ) {
			$logger->info("going to read alignment file list $aln_list");
			open my $fh, '<', $aln_list or die $!;
			my @al = <$fh>;
			close $fh;
			chomp @al; 
			push @files, @al;
		}
		$logger->info( 'Got file names of ' . scalar(@files) . ' to proecess' );
		
		my $seq_cnt = 0;
		# retrieve matrix object(s) from file(s)
		for my $file ( @files ) {
			$logger->info ("Processing alignment file $file");
			# create matrix object from file
			my $project = parse(
				'-format'     => $opt->format,
				'-type'       => 'dna',
				'-file'       => $file,
				'-as_project' => 1,
			    );
			my ($matrix) = @{ $project->get_items(_MATRIX_) };
			
			# iterate over sequences and insert into database
			for my $seq ( @{$matrix->get_entities} ) {
				$self->_insert_seq($seq, $matrix);				
				$seq_cnt++;				
			}
			
			# write sequence with new defline to file if generate_fasta flag is given,
			# also write new file name into list of fasta files									
			if ( $opt->generate_fasta ) {
				# print fasta
				(my $newfile = $file) =~ s/\.[^\.]+$//;
				# file extension removed, add .fa
				$newfile .= '-smrt-inserted.fa';
				$logger->info("Writing alignment to $newfile");
				unparse ( -phylo => $matrix, -file => $newfile, -format=>'fasta' );
				# print filename to list
				my $newlist .= 'aligned-smrt-inserted.txt';
				open my $fh, '>>', $newlist;
				print $fh $newfile . "\n";
				close $fh;
			}	
		}
		$logger->info("Inserted $seq_cnt sequences into database");   	
	}
	$logger->info("DONE");

}

sub _insert_seq {
	my ($self, $seq, $matrix, $prefix, $desc) = @_;
	
	my $logger = $self->logger;
	my $mts = Bio::Phylo::PhyLoTA::Service::MarkersAndTaxaSelector->new;
	
	my $id;
	my $name = $seq->get_name;
	if ( $name=~/^[0-9]+?/ ) {
		$id = $name;
	} 
	else {
		$logger->info("Descriptor of sequence $name does not look like taxon ID, trying to map id");
		$name =~ s/_/ /g;
		$logger->info("Trying to find $name");
		my ($node) = $mts->get_nodes_for_names($name);
		if ( ! $node ) {
			$logger->warn("Could not map taxon name $name, ignoring");
			# delete sequence from matrix object, so it won't appear in output fasta 
			$matrix->delete($seq);
			next;
		}				
		$id = $node->ti;
		$logger->info("Remapped $name to $id");
	}
	# gather fields required for 'seqs' table in phylota
	my $division = 'INV';
	my $acc_vers = 1;
	my $unaligned = $seq->get_unaligned_char;
	my $length = length($unaligned);
	my $gbrel = '000';
	my $def = $desc || "";
	
	$def .= " -- entry generated by SUPERSMART " . $Bio::SUPERSMART::VERSION . " --";
	
	my %seqids = $mts->generate_seqids($prefix);
	
	my $gi = $seqids{'gi'};
	my $acc = $seqids{'acc'};
	
	my $ti = $id;
	
	# set accession date to today
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
	my $acc_date = join("-", $year + 1900, $mon, $mday);
	
	$mts->insert_seq({gi=>$gi, ti=>$ti, acc=>$acc, acc_vers=>$acc_vers, length=>length($unaligned), division=>$division, acc_date=>$acc_date, gbrel=>$gbrel, def=>$def, seq=>$unaligned});
	
	# write FASTA file with definition line compatible with other smrt commands
	# since the newly inserted seqs have no cluster,  we set the seed gi to the gi of the sequence
	# and the mrca to the taxon id of the sequence
	my $defline = "gi|$gi|seed_gi|$gi|taxon|$ti|mrca/1-" . length($seq->get_char);
	$seq->set_generic('fasta_def_line', $defline);		

	$logger->info("Inserted sequence with gi $gi and accession $acc into database");	
}

sub _insert_taxa {
	my ($self, $taxafile) = @_;
	
	my $mt = Bio::Phylo::PhyLoTA::Domain::MarkersAndTaxa->new;
	my $mts = Bio::Phylo::PhyLoTA::Service::MarkersAndTaxaSelector->new;
	my $logger = $self->logger;
	
	my @records = $mt->parse_taxa_file($taxafile);
	my $counter = 0;
	# insert entries that are not yet in database
	for my $rec(@records) {
		# select species and genus; note that we do not need to 
		#  look for subspecies etc., since 'smrt replicate' only
		#  produces artificial species!
		my $taxon_name = $rec->{'name'};
		my $ti_species = $rec->{'species'};

		my $node = $mts->find_node($ti_species);
		if ( $node ) {
			$logger->info("Taxon $taxon_name ($ti_species) already in database, skipping.");
			next;
		}

		my $ti_genus = $rec->{'genus'};
		
		# gather other fields to enter
		my $ti_anc = $ti_genus;
		my $terminal_flag = 1;
		my $rank_flag = 1;
		my $rank = 'species';		
		# we will code in the common name that this entry was generated by smrt
		my $common_name = $taxon_name . " - entry generated by SUPERSMART "  . $Bio::SUPERSMART::VERSION . " -";
	
		$logger->info("Inserting node for taxon $taxon_name ($ti_species) into database ");
		$mts->insert_node({ti             => $ti_species, 
				   taxon_name     => $taxon_name,
				   ti_anc         => $ti_genus, 
				   terminal_flag  => $terminal_flag, 
				   rank_flag      => $rank_flag, 
				   rank           => $rank, 
				   common_name    => $common_name, 
				   #ti_genus       => $ti_genus,
				   common_name    => $common_name
				  });		
		$counter++;
	}	
	$logger->info("Inserted $counter nodes into database");	
}

1;
