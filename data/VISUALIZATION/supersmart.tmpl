<html>
	<head>
	<script type="text/javascript">
		var tree = [% tree.get_root.to_js %];
		var svgNS = 'http://www.w3.org/2000/svg';
		
		function rgb(triplet) {
			return 'rgb(' + triplet[0] + ',' + triplet[1] + ',' + triplet[2] + ')';
		}
		
		function drawTree(svg,node,parent) {
			var nx = node['map:x'];
			var ny = node['map:y'];
					
			// if not root, draw the branch to the parent
			if ( parent != null ) {
				var px = parent['map:x'];
				var py = parent['map:y'];			
				var branchStyle = {
					'stroke'       : rgb(node['map:branch_color']) || 'black',
					'stroke-width' : node['map:branch_width'] || 2,
				};
				drawLine(svg,px,py,px,ny,branchStyle);
				drawLine(svg,px,ny,nx,ny,branchStyle);
				
				// overlay black dotted line if backbone
				if ( node.backbone ) {
					branchStyle['stroke'] = 'black';
					branchStyle['stroke-dasharray'] = '5, 5';
					drawLine(svg,px,py,px,ny,branchStyle);
					drawLine(svg,px,ny,nx,ny,branchStyle);				
				}			
			}
			
			// if node has a label, draw it. make bold if exemplar.
			if ( node.binomial != null ) {
				var fontWeight = node.exemplar ? 'bold' : 'normal';
				drawText(
					svg,
					nx + ( node['map:text_horiz_offset'] || 12 ),
					ny + ( node['map:text_vert_offset']  || 3 ),
					node.binomial,
					{
						'stroke'      : node['map:font_color'],					
						'font-family' : node['map:font_face']  || 'Verdana',
						'font-size'   : node['map:font_size']  || '10px',
						'font-style'  : node['map:font_style'] || 'italic',
						'font-weight' : fontWeight,
					}
				);
			}
			
			// recurse
			for ( var i = 0; i < node.children.length; i++ ) {
				drawTree(svg,node.children[i],node);
			}
			
			// draw the node if internal
			if ( node.children.length != 0 ) {
				var nodeColor = node.fossil ? 'black' : 'white';
				drawCircle(
					svg,
					nx,
					ny,
					node['map:radius'] || 8,
					{
						'fill'         : nodeColor,
						'stroke'       : rgb(node['map:branch_color']) || 'black',
						'stroke-width' : node['map:branch_width'] || 2,
						'cursor'       : 'pointer'		
					}
				);
			}			
		}
		
		function drawLine(svg,x1,y1,x2,y2,style) {
			var lineElt = document.createElementNS(svgNS,'line');
			lineElt.setAttributeNS( null, 'x1', new String(x1) + 'px' );
			lineElt.setAttributeNS( null, 'y1', new String(y1) + 'px' );                
			lineElt.setAttributeNS( null, 'x2', new String(x2) + 'px' );
			lineElt.setAttributeNS( null, 'y2', new String(y2) + 'px' );
			lineElt.setAttributeNS( null, 'style', makeStyle(style) );
			svg.appendChild(lineElt);
			return lineElt;
		}
		
		function drawCircle(svg,cx,cy,r,style) {
			var nodeElt = document.createElementNS(svgNS, 'circle' );
			nodeElt.setAttributeNS( null, 'cx', new String(cx) + 'px' );
			nodeElt.setAttributeNS( null, 'cy', new String(cy) + 'px' );
			nodeElt.setAttributeNS( null, 'r',  new String(r)  + 'px' );
			nodeElt.setAttributeNS( null, 'style', makeStyle(style) );	
			svg.appendChild(nodeElt);
			return nodeElt;				
		}
		
		function drawText(svg,x,y,text,style) {
            		var txtElt = document.createElementNS(svgNS,'text');
            		var txt = document.createTextNode(text);
            		txtElt.appendChild(txt);
            		txtElt.setAttributeNS( null, 'x', new String(x) + 'px' );
            		txtElt.setAttributeNS( null, 'y', new String(y) + 'px' );
            		txtElt.setAttributeNS( null, 'style', makeStyle(style) );
            		svg.appendChild(txtElt);
            		return txtElt;		
		}
		
		function makeStyle(style) {
			var string = '';
			for ( var property in style ) {
				if ( style.hasOwnProperty(property) ) {
					string += property + ':' + style[property] + ';';
				}
			}
			return string;			
		}	
	</script>
	</head>
	<body onload="drawTree(document.getElementById('svgTree'),tree,null)">
		<svg 
			id="svgTree"
			version="1.1" 
			width="[% width %]" 
			height="[% height %]" 
			xmlns="http://www.w3.org/2000/svg">     
	    </svg>	
	</body>
</html>
